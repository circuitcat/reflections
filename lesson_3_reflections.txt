When would you create a remote vs local repository?

Depends on if you need to work on the files locally or share them to colaborate.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If your project isn't ready to share with others yet, it doesn't make sense to sync it, so manual is the best way.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are clones done on GitHub. Clones are complete copies of a repository. Branches are part of a repository that track changes separatly from other bracnhes. So you might creat a branch to try out a new feature locally. You might make a clone to get a copy of a repository you want to use. If you use GitHub, Fork is the way you do a clone, but fork also has a few more features like linking back to the source and tracking how many forks there are.

What is the benefit of having a copy of the last known state of the remote stored locally?

You can tell if you have changed state from the remote

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

You could email an archive of the files to the collaborator(s), give them an assignment, they could email you back the changes for you to check and manually merge. There is no overhaed of Git and GitHub, but there is a lot of other work trying to manage everything manually. So the overhead doeas not seem that bad after all.

You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.

Given that, please add the following question and your thoughts on it to your reflections file:

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Ultimately, separate branches allow for better collaboration, especially as more people are involved. If everyone is working on the master, you have to many layers of change without logical separation.

